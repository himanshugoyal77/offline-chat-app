"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./components/TalkingAvatar.tsx":
/*!**************************************!*\
  !*** ./components/TalkingAvatar.tsx ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\nvar _s = $RefreshSig$();\n\nconst TalkingAvatar = (param)=>{\n    let { script } = param;\n    _s();\n    const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [talkStreamId, setTalkStreamId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const apiKey = \"Z2FyYmFnZWlkNzg2QGdtYWlsLmNvbQ:Ddo7s-5dWe3uCwTK0hfn8\"; // Replace with your D-ID API key\n    const imageUrl = \"https://img.freepik.com/free-photo/portrait-white-man-isolated_53876-40306.jpg?semt=ais_hybrid\"; // Replace with the URL to your avatar image\n    // Store the previous scripts and their talk stream IDs to avoid duplicate API calls\n    const scriptsCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({});\n    const createTalkStream = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"TalkingAvatar.useCallback[createTalkStream]\": async ()=>{\n            try {\n                // Check if the script has already been processed\n                if (scriptsCache.current[script]) {\n                    console.log(\"Script already processed:\", script);\n                    setTalkStreamId(scriptsCache.current[script]); // Use the cached talkStreamId\n                    return;\n                }\n                // Step 1: Create a new talk stream only if script is not empty\n                if (!script || script.length < 3) {\n                    throw new Error(\"Input text must be at least 3 characters long.\");\n                }\n                const response = await fetch(\"https://api.d-id.com/talks/\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: \"Basic \".concat(btoa(apiKey + \":\"))\n                    },\n                    body: JSON.stringify({\n                        source_url: imageUrl,\n                        script: {\n                            type: \"text\",\n                            input: script,\n                            provider: {\n                                type: \"google\"\n                            }\n                        }\n                    })\n                });\n                if (!response.ok) {\n                    throw new Error(\"Failed to create talk stream\");\n                }\n                const { id } = await response.json();\n                setTalkStreamId(id); // Store the talk stream ID to trigger the next steps\n                // Cache the script and its talkStreamId\n                scriptsCache.current[script] = id;\n            } catch (error) {\n                console.error(\"Error creating talk stream:\", error);\n            }\n        }\n    }[\"TalkingAvatar.useCallback[createTalkStream]\"], [\n        script\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"TalkingAvatar.useEffect\": ()=>{\n            if (talkStreamId) {\n                const startWebRTCConnection = {\n                    \"TalkingAvatar.useEffect.startWebRTCConnection\": async ()=>{\n                        try {\n                            const offerResponse = await fetch(\"https://api.d-id.com/talks/\".concat(talkStreamId, \"/\"), {\n                                headers: {\n                                    \"Content-Type\": \"application/json\",\n                                    Authorization: \"Basic \".concat(btoa(apiKey + \":\"))\n                                }\n                            });\n                            if (!offerResponse.ok) {\n                                throw new Error(\"Failed to start WebRTC connection\");\n                            }\n                            const { sdp } = await offerResponse.json();\n                            // Step 3: Play the video stream\n                            if (videoRef.current) {\n                                const video = videoRef.current;\n                                // Reset the video source to avoid \"new load request\" issue\n                                video.srcObject = null; // Remove previous stream\n                                video.src = URL.createObjectURL(new Blob([\n                                    sdp\n                                ], {\n                                    type: \"application/sdp\"\n                                }));\n                                // Ensure the play() request is not interrupted\n                                video.load(); // Reload the video element\n                                video.play();\n                            }\n                        } catch (error) {\n                            console.error(\"Error starting WebRTC connection:\", error);\n                        }\n                    }\n                }[\"TalkingAvatar.useEffect.startWebRTCConnection\"];\n                startWebRTCConnection();\n            }\n        }\n    }[\"TalkingAvatar.useEffect\"], [\n        talkStreamId\n    ]); // Only run this effect when the talk stream ID is available\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"TalkingAvatar.useEffect\": ()=>{\n            createTalkStream();\n        }\n    }[\"TalkingAvatar.useEffect\"], [\n        script,\n        createTalkStream\n    ]); // Only recreate the talk stream when the script changes\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"video\", {\n        ref: videoRef,\n        controls: true\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\aadil\\\\TechXpression\\\\components\\\\TalkingAvatar.tsx\",\n        lineNumber: 102,\n        columnNumber: 10\n    }, undefined);\n};\n_s(TalkingAvatar, \"mrPEba6zKiI39N46kgdX8VYswVU=\");\n_c = TalkingAvatar;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TalkingAvatar);\nvar _c;\n$RefreshReg$(_c, \"TalkingAvatar\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/TalkingAvatar.tsx\n"));

/***/ })

});